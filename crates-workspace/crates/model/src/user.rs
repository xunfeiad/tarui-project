//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
// use chrono::*;
use async_trait::async_trait;
use chrono::{FixedOffset, Utc};
use sea_orm::ActiveValue;
use serde::{Deserialize, Serialize};
use utils::sha256_hash;

#[derive(Default, Clone, Debug, PartialEq, Eq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(schema_name = "auth", table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key)]
    #[serde(skip)]
    pub id: i32,
    #[sea_orm(unique)]
    pub username: String,
    #[sea_orm(column_type = "Text")]
    pub password: String,
    pub nick_name: Option<String>,
    #[sea_orm(column_type = "Text")]
    #[serde(default)]
    pub avatar: String,
    #[sea_orm(unique)]
    pub mobile: String,
    #[sea_orm(unique)]
    pub email: String,
    #[serde(skip)]
    pub create_time: Option<DateTimeWithTimeZone>,
    #[serde(skip)]
    pub update_time: Option<DateTimeWithTimeZone>,
    pub status: Option<i16>,
    #[serde(skip)]
    pub last_login_time: Option<DateTimeWithTimeZone>,
    #[serde(skip)]
    pub deleted: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_role::Entity")]
    UserRole,
}

impl Related<super::user_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRole.def()
    }
}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        self.id = ActiveValue::NotSet;
        self.password = ActiveValue::Set(sha256_hash(self.password.as_ref()));
        let offset: FixedOffset = FixedOffset::east_opt(8 * 60 * 60).unwrap();
        let now_with_offset = Utc::now().with_timezone(&offset);
        if insert {
            self.create_time = ActiveValue::Set(Some(now_with_offset));
            if self.update_time.clone().into_value().is_none() {
                self.update_time = ActiveValue::Set(Some(now_with_offset));
            }
            self.status = ActiveValue::NotSet;
        } else {
            self.update_time = ActiveValue::Set(Some(now_with_offset))
        }
        Ok(self)
    }
}
